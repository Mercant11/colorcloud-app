import React, { useState, useEffect } from 'react';
import './App.css';
import myLogo from './my-logo.png';

const DEFINITIONS = { 'Avg. Daily Volatility': 'The average percentage swing between the high and low price for each day in the period.', 'Most Volatile Day': 'The single day in the period with the largest percentage swing between its high and low price.', 'Period Fluctuation': 'The total percentage swing from the absolute lowest price to the absolute highest price across the entire period.', 'Days Analyzed': 'The total number of valid data rows used in the calculation.', 'Highest Avg. High': 'The day of the week that, on average, has the highest high price.', 'Lowest Avg. Low': 'The day of the week that, on average, has the lowest low price.', 'Most Volatile Day (Weekly)': 'The day of the week that, on average, has the highest volatility.', 'Required Exit Price': 'The price the asset must reach from your entry price to achieve your desired gain.', 'Success Probability': 'Based on historical data, this is the percentage of past days where an upward move was large enough to hit your profit target.', 'Days Meeting Target': 'The actual number of days in the historical period that met the conditions for a successful trade.', 'Plausibility Rating': 'A quick assessment of the trade\'s difficulty based on the historical success probability.' };
const RATINGS = [ { name: "Stable", emoji: '🟢', color: '#66BB6A', range: '0% - 1.99%' }, { name: "Minor", emoji: '🟡', color: '#FFEE58', range: '2% - 3.99%' }, { name: "Moderate", emoji: '🟠', color: '#FFA726', range: '4% - 6.99%' }, { name: "High", emoji: '🔴', color: '#EF5350', range: '7% - 9.99%' }, { name: "Extreme", emoji: '🟣', color: '#AB47BC', range: '10% +' } ];
const getRatingDetails = (ratingString) => { return RATINGS.find(r => r.name.startsWith(ratingString.split(' ')[0])) || { emoji: '⚪', color: 'var(--text-color)' }; };
function Legend({ theme }) { return ( <div className="legend"> {RATINGS.map(rating => ( <div key={rating.name} className="tooltip-container"> <div className="legend-item"> <span className="legend-emoji" style={{color: theme === 'light' ? rating.color: ''}}>{rating.emoji}</span> {rating.name} </div> <span className="tooltip-text">{rating.range}</span> </div> ))} </div> ); }
function HistoricalAnalysisDisplay({ data }) { if (!data) return null; const ratingDetails = getRatingDetails(data.avg_vol_rating); return ( <div className="results-area"> <h2>Analysis Results</h2> <p className="date-range">{data.start_date} to {data.end_date}</p> <div className="results-grid"> <div className="result-card"> <div className="tooltip-container"><h4>Avg. Daily Volatility</h4><span className="tooltip-text">{DEFINITIONS['Avg. Daily Volatility']}</span></div> <p className="volatility-percent" style={{color: ratingDetails.color}}>{ratingDetails.emoji} {data.avg_vol.toFixed(2)}%</p> <span className="rating-text">{data.avg_vol_rating}</span> </div> <div className="result-card"><div className="tooltip-container"><h4>Most Volatile Day</h4><span className="tooltip-text">{DEFINITIONS['Most Volatile Day']}</span></div><p>{data.max_vol.toFixed(2)}%</p></div> <div className="result-card"><div className="tooltip-container"><h4>Period Fluctuation</h4><span className="tooltip-text">{DEFINITIONS['Period Fluctuation']}</span></div><p>{data.period_fluc.toFixed(2)}%</p></div> <div className="result-card"><div className="tooltip-container"><h4>Days Analyzed</h4><span className="tooltip-text">{DEFINITIONS['Days Analyzed']}</span></div><p>{data.days}</p></div> </div> </div> ); }
function DayOfWeekTrendsDisplay({ data }) { if (!data || Object.keys(data).length === 0) return null; let highlights = { highDay: '-', lowDay: '-', volDay: '-' }; let maxHigh = -Infinity, minLow = Infinity, maxVol = -Infinity; for (const day in data) { if (data[day].avg_high > maxHigh) { maxHigh = data[day].avg_high; highlights.highDay = day; } if (data[day].avg_low < minLow) { minLow = data[day].avg_low; highlights.lowDay = day; } if (data[day].avg_vol > maxVol) { maxVol = data[day].avg_vol; highlights.volDay = day; } } return ( <div className="results-area"> <h3>Day-of-Week Trends</h3> <div className="results-grid"> <div className="result-card"><div className="tooltip-container"><h4>Highest Avg. High</h4><span className="tooltip-text">{DEFINITIONS['Highest Avg. High']}</span></div><p>📈 {highlights.highDay}</p></div> <div className="result-card"><div className="tooltip-container"><h4>Lowest Avg. Low</h4><span className="tooltip-text">{DEFINITIONS['Lowest Avg. Low']}</span></div><p>📉 {highlights.lowDay}</p></div> <div className="result-card"><div className="tooltip-container"><h4>Most Volatile Day</h4><span className="tooltip-text">{DEFINITIONS['Most Volatile Day (Weekly)']}</span></div><p>⚡ {highlights.volDay}</p></div> </div> </div> ); }
function PlannerResultsDisplay({ planResult }) { if (!planResult) return null; const { required_exit_price, success_probability, successful_days, total_days } = planResult; let plausibility = { text: 'Unlikely', emoji: '🔴' }; if (success_probability >= 75) { plausibility = { text: 'Achievable', emoji: '🟢' }; } else if (success_probability >= 40) { plausibility = { text: 'Ambitious', emoji: '🟡' }; } return ( <div className="results-area"> <h3>Trade Plan Results</h3> <div className="results-grid planner-grid"> <div className="result-card"><div className="tooltip-container"><h4>Required Exit Price</h4><span className="tooltip-text">{DEFINITIONS['Required Exit Price']}</span></div><p>${required_exit_price.toFixed(4)}</p></div> <div className="result-card"><div className="tooltip-container"><h4>Success Probability</h4><span className="tooltip-text">{DEFINITIONS['Success Probability']}</span></div><p>{success_probability.toFixed(1)}%</p></div> <div className="result-card"><div className="tooltip-container"><h4>Days Meeting Target</h4><span className="tooltip-text">{DEFINITIONS['Days Meeting Target']}</span></div><p>{successful_days} of {total_days}</p></div><div className="result-card"><div className="tooltip-container"><h4>Plausibility Rating</h4><span className="tooltip-text">{DEFINITIONS['Plausibility Rating']}</span></div><p>{plausibility.emoji} {plausibility.text}</p></div>  </div> </div> ); }
function TradeCalculator({ onCheckProbability, isLoading }) { const [entry, setEntry] = useState('100'); const [gain, setGain] = useState('5'); const [exit, setExit] = useState('105'); const [lastChanged, setLastChanged] = useState('gain'); useEffect(() => { if (lastChanged === 'gain' || lastChanged === 'entry') { const entryVal = parseFloat(entry); const gainVal = parseFloat(gain); if (!isNaN(entryVal) && !isNaN(gainVal)) { const newExit = entryVal * (1 + gainVal / 100); setExit(newExit.toFixed(4)); } } }, [entry, gain, lastChanged]); useEffect(() => { if (lastChanged === 'exit') { const entryVal = parseFloat(entry); const exitVal = parseFloat(exit); if (!isNaN(entryVal) && !isNaN(exitVal) && entryVal > 0) { const newGain = ((exitVal - entryVal) / entryVal) * 100; setGain(newGain.toFixed(2)); } } }, [entry, exit, lastChanged]); const handlePlanClick = () => { onCheckProbability({ entry_price: parseFloat(entry), desired_gain: parseFloat(gain) }); }; return ( <div className="planner-area"> <h2>Trade Calculator</h2> <div className="planner-input-group"> <div className="input-field"> <label>Entry Price</label> <input type="number" value={entry} onChange={e => { setEntry(e.target.value); setLastChanged('entry'); }} /> </div> <div className="input-field"> <label>Desired % Gain</label> <input type="number" value={gain} onChange={e => { setGain(e.target.value); setLastChanged('gain'); }} /> </div> <div className="input-field"> <label>Exit Price</label> <input type="number" value={exit} onChange={e => { setExit(e.target.value); setLastChanged('exit'); }} /> </div> </div> <button onClick={handlePlanClick} disabled={isLoading || !entry || !gain}> {isLoading ? 'Checking...' : 'Check Historical Probability'} </button> </div> ); }
function InterestIncreaseCalculator() { const [initial, setInitial] = useState(100); const [increase, setIncrease] = useState(10); const result = initial * (1 + increase / 100); return ( <div className="calculator-card"> <h4>Percentage Increase</h4> <div className="calc-input-group"> <label>Initial Value</label> <input type="number" value={initial} onChange={e => setInitial(parseFloat(e.target.value) || 0)} /> <label>Increase By</label> <input type="number" value={increase} onChange={e => setIncrease(parseFloat(e.target.value) || 0)} /> % </div> <div className="calc-result"> <span>New Value:</span> <strong>{result.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</strong> </div> </div> ); }
function CompoundInterestCalculator() { const [principal, setPrincipal] = useState(1000); const [ratePerPeriod, setRatePerPeriod] = useState(5); const [periods, setPeriods] = useState(12); const P = principal; const r = ratePerPeriod / 100; const t = periods; const result = P * Math.pow(1 + r, t); return ( <div className="calculator-card"> <h4>Compound Interest</h4> <div className="calc-input-group"> <label>Principal Amount (P)</label> <input type="number" value={principal} onChange={e => setPrincipal(parseFloat(e.target.value) || 0)} /> <label>Rate per Period (R%)</label> <input type="number" value={ratePerPeriod} onChange={e => setRatePerPeriod(parseFloat(e.target.value) || 0)} /> <label>Number of Periods (t)</label> <input type="number" value={periods} onChange={e => setPeriods(parseInt(e.target.value) || 0)} /> </div> <div className="calc-result"> <span>Accrued Amount (A):</span> <strong>${result.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</strong> </div> </div> ); }
function AccordionSection({ title, children, sectionId, openSection, setOpenSection }) { const isOpen = openSection === sectionId; return ( <div className="accordion-section"> <button className={`accordion-header ${isOpen ? 'active' : ''}`} onClick={() => setOpenSection(isOpen ? null : sectionId)}>{title}</button> <div className={`accordion-content ${isOpen ? 'open' : ''}`}>{children}</div> </div> ); }

export default function DashboardPage({ onLogout, theme, toggleTheme }) {
  const [pastedData, setPastedData] = useState('');
  const [analysisResult, setAnalysisResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [planResult, setPlanResult] = useState(null);
  const [isPlanning, setIsPlanning] = useState(false);
  const [priceData, setPriceData] = useState([]);
  const [openSection, setOpenSection] = useState(null);
  
  const handleLogout = async () => { await fetch(`http://${window.location.hostname}:5000/logout`, { method: 'POST', credentials: 'include' }); onLogout(); };
  const handleAnalysis = async () => { setIsLoading(true); setAnalysisResult(null); setPlanResult(null); setOpenSection(null); const parsedData = pastedData.trim().split('\n').map(line => { const dateMatch = line.match(/([A-Za-z]{3}\s\d{1,2},\s\d{4})/); if (!dateMatch) { const parts = line.split(/\s+/); if (parts.length < 3) return null; const date = parts[0]; const high = parseFloat(parts[1]); const low = parseFloat(parts[2]); if (!date || isNaN(high) || isNaN(low)) return null; return { date, high, low };} const dateStr = dateMatch[0]; const numbersStr = line.substring(dateStr.length); const numbers = numbersStr.match(/[\d,]+\.\d+/g); if (!numbers || numbers.length < 3) return null; return { date: new Date(dateStr).toISOString().split('T')[0], high: parseFloat(numbers[1].replace(/,/g, '')), low: parseFloat(numbers[2].replace(/,/g, '')) }; }).filter(item => item !== null); if (parsedData.length === 0) { alert("No valid data rows found."); setIsLoading(false); return; } setPriceData(parsedData); try { const response = await fetch(`http://${window.location.hostname}:5000/analyze`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ price_data: parsedData }), credentials: 'include' }); if (!response.ok) throw new Error('Network response was not ok'); const results = await response.json(); setAnalysisResult(results); setOpenSection('analysis'); } catch (error) { console.error("Error:", error); alert("Error connecting to backend."); } setIsLoading(false); };
  const handleClear = () => { setPastedData(''); setAnalysisResult(null); setPlanResult(null); setPriceData([]); setOpenSection(null); };
  const handleCheckProbability = async (tradePlan) => { setIsPlanning(true); setPlanResult(null); try { const response = await fetch(`http://${window.location.hostname}:5000/plan`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ price_data: priceData, trade_plan: tradePlan }), credentials: 'include' }); if (!response.ok) throw new Error('Network response was not ok'); const results = await response.json(); setPlanResult(results); } catch (error) { console.error("Error:", error); alert("Error connecting to backend for planning."); } setIsPlanning(false); };
  
  return (
    <>
      <header className="App-header"> <img src={myLogo} className="App-logo" alt="My Company Logo" /> <h1>☁️ ColorCloud Trading Tool</h1> <button onClick={handleLogout} className="logout-button">Logout</button> <button onClick={toggleTheme} className="theme-toggle"> {theme === 'dark' ? '☀️' : '🌙'} </button> <Legend theme={theme} /> </header>
      <main>
        <div className="input-area">
          <h3>Paste Historical Data Here:</h3>
          <textarea value={pastedData} onChange={(e) => setPastedData(e.target.value)} placeholder={"Paste your data here..."} />
          <div className="button-group">
            <button onClick={handleAnalysis} disabled={isLoading || !pastedData}> {isLoading ? 'Analyzing...' : 'Analyze'} </button>
            <button onClick={handleClear} className="clear-button">Clear</button>
          </div>
        </div>
        {analysisResult && ( <div className="results-display-area"> {analysisResult.historical_analysis?.avg_vol < 0 ? ( <div className="results-area error-card"><h2>Data Format Error</h2><p>Please ensure input data has spaces between columns.</p></div> ) : ( <>
            <AccordionSection title="Analysis Results" sectionId="analysis" openSection={openSection} setOpenSection={setOpenSection}>
                <HistoricalAnalysisDisplay data={analysisResult.historical_analysis} />
            </AccordionSection>
            <AccordionSection title="Day-of-Week Trends" sectionId="dayOfWeek" openSection={openSection} setOpenSection={setOpenSection}>
                <DayOfWeekTrendsDisplay data={analysisResult.day_of_week_analysis} />
            </AccordionSection>
            <AccordionSection title="Target Gain Planner" sectionId="planner" openSection={openSection} setOpenSection={setOpenSection}>
                <TradeCalculator onCheckProbability={handleCheckProbability} isLoading={isPlanning} />
                {planResult && <PlannerResultsDisplay planResult={planResult} />}
            </AccordionSection>
        </> )} </div> )}
        <AccordionSection title="Financial Calculators 🧮" sectionId="calculators" openSection={openSection} setOpenSection={setOpenSection}>
            <div className="calculators-grid"> <InterestIncreaseCalculator /> <CompoundInterestCalculator /> </div>
        </AccordionSection>
      </main>
    </>
  );
}
